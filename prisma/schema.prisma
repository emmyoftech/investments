// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =============================
// USER MODEL
// =============================
model User {
  id                Int       @id @default(autoincrement())
  firstName         String
  lastName          String
  username          String
  email             String    @unique
  password          String
  phone             String?
  mainBalance       Float     @default(0)
  investmentBalance Float     @default(0)
  totalEarn         Float     @default(0)
  totalDeposit      Float     @default(0)
  totalWithdrawals  Float     @default(0)
  roi               Float     @default(0)
  redeemedRoi       Float     @default(0)
  speedInvest       Float     @default(0)
  completed         Float     @default(0)
  interestBalance   Float     @default(0)
  rewardPoints      Float     @default(0)
  referredById      Int?
  createdAt         DateTime  @default(now())

  // Relations
  deposits          Deposit[]
  investments       Investment[]
  transactions      Transaction[]
  withdrawals       Withdrawal[]
  referrals         Referral[]
  referredUsers     User[]    @relation("ReferralRelation")
  rewardLedger      RewardLedger[]
  referrer          User?     @relation("ReferralRelation", fields: [referredById], references: [id])
}

// =============================
// DEPOSIT MODEL
// =============================
model Deposit {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  amount     Float
  currency   String
  address    String
  status     String    @default("Pending") // Pending | Completed | Failed
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

// =============================
// INVESTMENT MODEL
// =============================
model Investment {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  planName    String
  planId      Int
  roi         Float
  duration    String
  durationDays Int
  amount      Float
  startDate   DateTime  @default(now())
  endDate     DateTime?
  maturityDate DateTime? // Added maturityDate
  status      String    @default("Active") // Active | Completed
  createdAt   DateTime  @default(now())
}

// =============================
// TRANSACTION MODEL
// =============================
model Transaction {
  id             Int       @id @default(autoincrement())
  userId         Int
  user           User      @relation(fields: [userId], references: [id])
  type           String?   // deposit | withdraw | invest | roi
  amount         Float
  description    String?
  status         String    @default("Success")
  paymentMethod  String?
  transactionRef String?
  createdAt      DateTime  @default(now())
}

// =============================
// WITHDRAWAL MODEL
// =============================
model Withdrawal {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  amount    Float
  address   String?
  currency  String?
  status    String   @default("Pending")
  createdAt DateTime @default(now())
}

// =============================
// REFERRAL MODEL
// =============================
model Referral {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  code      String   @unique
  createdAt DateTime @default(now())
}

// =============================
// REWARD LEDGER MODEL
// =============================
model RewardLedger {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  type        String   // 'earned' | 'redeemed'
  points      Float
  description String?
  refId       Int?     // Reference to deposit/investment/transaction id
  createdAt   DateTime @default(now())
}
